import HttpService from "./HttpService";
import ChatScoket, { ImMessage } from "./ChatSocket";
import { Logger } from "./Log";

export default class User {

    userReq: { mobile: string, pwd: string, account: string, mobileCode: string, device: number };

    private httpService: HttpService;

    private chatSocket!: ChatScoket;

    private myInfo: any;


    private userData: {
        customerStatus: string;
        imServerFilePort: string;
        imServerApiPort: string;
        imServerFileUrl: string;
        imServerUrl: string;
        sign: string;
        customerInfo: {
            customerNickName: string;
            customerHeadUrl: string;
            customerId: string;
            customerUserId: string;
        };
        imei: string;
        imServerApiUrl: string;
        imServerPort: string;
        token: string;
    } | undefined

    constructor(data: { mobile: string, pwd: string, account: string, mobileCode: string, device: number }) {
        this.userReq = data;
        this.httpService = new HttpService();
    }

    resolveMessage = async (data: any) => {
        console.log(data.content, '-------->');

        // let imMessage = new ImMessage(this.myInfo.id,2,data.destId,this.myInfo.name,this.myInfo.headUrl,'我就是要给回消息',2);
        // this.chatSocket.sendMsg(imMessage);
    }

    public async register(data: { mobile: string, pwd: string, name: string, validateNum: string, headUrl: string, account: string, device: number, mobileCode: string }): Promise<any> {
        return this.httpService.register(data);
    }

    private ids = [10409343, 10530080, 10600673, 10612222, 10638027, 10638871, 10710630, 10726240]//,10753044,10771606,10865873,10930660,10963811,11045041,11116088,11202782,11231016,11378906,11527445,11695559,11780120,11913209,11913435,11925825,11945035,12053251,12058482,12061154,12131521,12167042,12180568,12215512,12304688,12436760,12483950,12513638,12520948,12551398,12566927,12629357,12702409,12775868,12833169,12835896,12925285,12933056,12958146,12985212,12996953,13032460,13047804,13158876,13190592,13208786,13295564,13508911,13510205,13617012,13678063,13804258,13836559,13859029,14190246,14217532,14320659,14477401,14530046,14582406,14590215,14595188,14654284,14707733,14709423,14741808,14747787,14749819,14989471,14989873,15032088,15241428,15276447,15298553,15308277,15323950,15383336,15415154,15498605,15507720,15651328,15696453,15725285,15844511,15883131,15884808,15938606,16015797,16036194,16039205,16043199,16095212,16129151,16131043,16157925,16184568,16205037,16266443,16278612,16328852,16346611,16498956,16526060,16526121,16591558,16661948,16682287,16746527,16761207,16779168,16786739,16788669,16814492,16914968,16977005,17071803,17098595,17112894,17197615,17227137,17253283,17253619,17295030,17381765,17396662,17413001,17464849,17573118,17603567,17659824,17811936,17837422,17882922,17885867,17893773,17929617,17984224,18009398,18019817,18130863,18154268,18184867,18225996,18332446,18363828,18404869,18427848,18534497,18600444,18627391,18654170,18663298,18675346,18683031,18692575,18780921,18787476,18921491,18935309,18979071,18984890,18986642,19012608,19092002,19134137,19186451,19285069,19306805,19358724,19365100,19499033,19620853,19666570,19838840,19918504,20129209,20145144,20194816,20244694,20264162,20305751,20314356,20335477,20377425,20516287,20531883,20544639,20614214,20690792,20694222,20832139,20854991,20869030,20903745,20980352,21011882,21113286,21173772,21236214,21244997,21271073,21272332,21396163,21427661,21511965,21515048,21516742,21585368,21869901,21896151,21905029,21936852,21939437,21993198,22063680,22110783,22115962,22141745,22266858,22273138,22355691,22360414,22383625,22448008,22450158,22491365,22509096,22528085,22574009,22598020,22604335,22614112,22669223,22690009,22691952,22780104,22809537,22847322,22933893,23013072,23054399,23092502,23109658,23110821,23114241,23122164,23130857,23165162,23233188,23246428,23287524,23332455,23409027,23432642,23464649,23528093,23584731,23688008,23774446,23932594,23942836,24014473,24032615,24036934,24046418,24083183,24147399,24434920,24498690,24518101,24546351,24558725,24582658,24700488,24762582,24769881,24780913,24911069,24932331,24972347,25014530,25113884,25151278,25205329,25221304,25227182,25248697,25278199,25409386,25501585,25544965,25591847,25607225,25628645,25734299,25835819,26065406,26127080,26198996,26221219,26265100,26358064,26426611,26428328,26462762,26517456,26522471,26597781,26617335,26621651,26696639,26720744,26738954,26785363,26806352,26863470,26993369,27158416,27245357,27249542,27324407,27381798,27421924,27458084,27516262,27555883,27568044,27577294,27611979,27643556,27734222,27780047,27797319,27799257,27845839,27875024,27896044,28021873,28022366,28073274,28213629,28219089,28221439,28233284,28304762,28374353,28421055,28445439,28550456,28573244,28663907,28790907,28825869,28826464,28848231,28983674,28990440,29004656,29019103,29073130,29142878,29168516,29177245,29182935,29187068,29362112,29389754,29434402,29435770,29438179,29441779,29667397,29733967,29742859,29793011,29884928,29887598,29916801,29945955,29977432,30001355,30156601,30267065,30388179,30395705,30402206,30508850,30546432,30557247,30577733,30608518,30620996,30714463,30775830,30812321,30828507,30875753,30933394,30952002,30997479,31009104,31012265,31039418,31102247,31108028,31128339,31207610,31218694,31221455,31276147,31398005,31441231,31501457,31550485,31572072,31613705,31654904,31767472,32024852,32026178,32039964,32069682,32069695,32075603,32195783,32248995,32327244,32329502,32492127,32519210,32576407,32616732,32646491,32697099,32774089,32798709,32810574,32849213,32866010,32937651,32958681,32980764,33056565,33102204,33118397,33241346,33273081,33303411,33323510,33487350,33498103,33589762,33712390,33922681,33940994,34044521,34136262,34269419,34314383,34351888,34558567,34624691,34726485,34855032,34882779,34926543,34951618,35230610,35239320,35365023,35468651,35500628,35512071,35556467,35593937,35600177,35601320,35633721,35644646,35646516,35692277,35724120,35724265,35725944,35777311,35822695,35831740,35838519,35868780,35908507,35942708,35993057,36247798,36592988,36604079,36638986,36723912,36888498,36982626,37028974,37053515,37127355,37223237,37255427,37280622,37280879,37393147,37425076,37429983,37433872,37497771,37578453,37642090,37682753,37684413,37780189,37872897,37895110,37992684,38120629,38231133,38321693,38351843,38364221,38397352,38437319,38576594,38619350,38635241,38654760,38717629,38811778,38824622,38855113,38953633,39016026,39095844,39115291,39167283,39252382,39256252,39270697,39275242,39299681,39304248,39350875,39357410,39380148,39464768,39633954,39734325,39741956,39750819,39779958,39831657,39888387,39905257,39967960,39990013,39993375,39997992,40252374,40288250,40304309,40359412,40437886,40477628,40545671,40706119,40764618,40874847,40903651,40909829,40917858,40921938,40935185,40941994,40964970,41057023,41092569,41275507,41303179,41515842,41560983,41636446,41709915,41715685,41808846,41852640,41859958,41892736,41969425,41984779,42013825,42102231,42168586,42180152,42223602,42282000,42341696,42369788,42373996,42428142,42475036,42603536,42725062,42751140,42761545,42947044,43005367,43034369,43051931,43107033,43156008,43208407,43243563,43260296,43374199,43426486,43496041,43635165,43800876,43813140,43948596,43979420,44150887,44163677,44176535,44284388,44409130,44432079,44551601,44557954,44570565,44677405,44689967,44712197,44763081,44837382,44843418,44857469,44876161,44879583,44920799,44970343,44991831,45025051,45044344,45062466,45260140,45594919,45628860,45654649,45866733,46047485,46088620,46108600,46127557,46133878,46244404,46427168,46443770,46531683,46535897,46545138,46595802,46679592,46725099,46772095,46812077,46837655,46871400,47149859,47225502,47247972,47414039,47526022,47549140,47568865,47679889,47802976,47860069,47900680,47906409,47984823,48118614,48253884,48412192,48567260,48604875,48616713,48717206,48771078,48847509,48885601,48927032,48927327,48965476,48968570,49004970,49019453,49046530,49052663,49088294,49198819,49199350,49268719,49299171,49307216,49363189,49375384,49564392,49640515,49726154,49729022,49808156,49816919,49835172,49997254,49999420,50019510,50028078,50045722,50097759,50145184,50242226,50247966,50296356,50311727,50322530,50370689,50376687,50430522,50645112,50869251,50960206,50974223,51018293,51073502,51289334,51324956,51339062,51354513,51417933,51482629,51485147,51544569,51634319,51664505,51669594,51738086,51746257,51810858,51827097,51837690,51898660,51902026,52101108,52174310,52268366,52397794,52437986,52458173,52569763,52698971,52786581,52822059,53013682,53075892,53270601,53347980,53349738,53369652,53380877,53395020,53408766,53483589,53709286,53806709,53958550,54001336,54084877,54092043,54095600,54095927,54205258,54266337,54309826,54418262,54450460,54542974,54565585,54569913,54598748,54613412,54618336,54628193,54634586,54787443,54805669,54812635,54864395,54884808,54894450,54915345,54922811,54950879,55018906,55035259,55052763,55055653,55067123,55084745,55092766,55141175,55141658,55300210,55336418,55448613,55485016,55494556,55511114,55538685,55557753,55567119,55653503,55700453,55746129,55749410,55873606,56055488,56069755,56116189,56296681,56326201,56624429,56629880,56804189,56833156,56847099,57013119,57020434,57028144,57045521,57053960,57088117,57150069,57153200,57247825,57278621,57305643,57366206,57440447,57441314,57479373,57547397,57568504,57774857,57775086,57838860,57867303,57921665,57923219,58019954,58217699,58219692,58221365,58263629,58371629,58379367,58382174,58395250,58397122,58404299,58405805,58422290,58432267,58438773,58451790,58497882,58502095,58506508,58565478,58587493,58604944,58700544,58733861,58807895,58837054,58929964,58939420,59028618,59115559,59174518,59202033,59212654,59230549,59262037,59266777,59325974,59386567,59499213,59525320,59590029,59660217,59714460,59776570,59818435,59850027,59855289,59866897,59943276,59979649,59982576,60013050,60059551,60077554,60178123,60196939,60218940,60272652,60277060,60294737,60316209,60318845,60332433,60464212,60563102,60648230,60652489,60663534,60701471,60704592,60858167,60981035,60995166,60996849,61042658,61068341,61081597,61093992,61157440,61204549,61406070,61475871,61478239,61563069,61590920,61608579,61617407,61826015,61885188,61933602,62020083,62043317,62066492,62312636,62331890,62390269,62416778,62444342,62490020,62512939,62558650,62559822,62566028,62714254,62732956,62742775,62791057,62823984,62829891,62848920,62860345,62887671,62900472,62961440,62996477,63009232,63035701,63056118,63116691,63313933,63318157,63343692,63435753]

    private index: number = 0;

    public async login(_index: number): Promise<any> {
        this.index = _index;

        let retData = await this.httpService.login(this.userReq);

        if (retData.code == '1') {

            let readyData = await this.httpService.ready({ token: retData.data.token });

            let imMessage: ImMessage;
            if (readyData.code == '1') {

                this.userData = retData.data;
                this.myInfo = readyData.data.myInfo;
                if (true || this.ids.indexOf(parseInt(this.myInfo.id)) != -1) {
                    // this.chatSocket = new ChatScoket((<any>this.userData).imServerUrl, parseInt((<any>this.userData).imServerPort), decodeURIComponent((<any>this.userData).token), (<any>this.userData).sign, () => {
                    this.chatSocket = new ChatScoket("10.10.10.145", 9092, decodeURIComponent((<any>this.userData).token), (<any>this.userData).sign, () => {
                        // this.chatSocket = new ChatScoket("159.138.21.74", 9093, decodeURIComponent((<any>this.userData).token), (<any>this.userData).sign, () => {

                        // (this.chatSocket as any)._chatSocket.close();
                        // return;

                        Logger.error(this.userReq.mobile, '----------->> 连接----->>', this.index);

                        setInterval(() => {
                            imMessage = new ImMessage(this.myInfo.id, 5, 5, 'test ', '', '', 1);
                            imMessage && this.chatSocket.sendHeardMsg(imMessage);
                        }, 3000);

                        let groups = readyData.data.groupsInfo;

                        groups && groups.map(async (group: any, index: number) => {
                            setTimeout(() => {
                                // if (group.name == '100') {
                                let chatIm: ImMessage = new ImMessage(this.myInfo.id as any, 2, group.id, this.myInfo.mobile, this.myInfo.headUrl, 'who-----' + this.myInfo.mobile, 2)
                                this.chatSocket.sendMsg(chatIm);
                                // }
                            }, index * 100)

                        })
                        // let no = 0;
                        // setInterval(() => {
                        //     // if (group.name == '100') {
                        //     no++;
                        //     let chatIm: ImMessage = new ImMessage(this.myInfo.id as any, 1, 13084260, this.myInfo.mobile, this.myInfo.headUrl, 'who-----' + this.myInfo.mobile + '---' + no, 2)
                        //     this.chatSocket.sendMsg(chatIm);

                        //     // }
                        // }, 100)
                    }, () => {
                        Logger.error(this.userReq.mobile, '----------->> 掉线----->>', this.index);
                    }
                    )
                    this.chatSocket.handleMsg(this.resolveMessage);
                }
            }
            return Promise.resolve(readyData.data);
        } else {
            // console.log(this.userReq.mobile, '--登录错误');
            console.log(retData);

            return Promise.resolve(retData.data);
        }


    }



    public async requestFriend(data: { destId: number, userId: number } | any): Promise<any> {
        return this.httpService.requestFriend(data);
    }



}